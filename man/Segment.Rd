% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Segment-generics.R, R/Segment-methods.R
\docType{methods}
\name{Segment}
\alias{Segment}
\alias{Segment,.compoundExpr-method}
\alias{Segment,.gaSegmentFilter-method}
\alias{Segment,NULL-method}
\alias{Segment,character-method}
\alias{Segment,gaDynSegment-method}
\alias{Segment,gaQuery-method}
\alias{Segment,gaSegmentFilterList-method}
\alias{Segment,gaSegmentId-method}
\alias{Segment,gaSegmentList-method}
\alias{Segment,gaUserSegment-method}
\alias{Segment,numeric-method}
\alias{Segment<-}
\alias{Segment<-,gaDynSegment,ANY-method}
\alias{Segment<-,gaDynSegment,andExpr-method}
\alias{Segment<-,gaQuery,ANY-method}
\alias{Segment<-,gaSegmentId,ANY-method}
\title{Segment.}
\usage{
Segment(object, ..., scope = "sessions")

Segment(object) <- value

\S4method{Segment}{gaSegmentId}(object)

\S4method{Segment}{character}(object)

\S4method{Segment}{numeric}(object)

\S4method{Segment}{gaDynSegment}(object)

\S4method{Segment}{.compoundExpr}(object, ..., scope = "sessions")

\S4method{Segment}{.gaSegmentFilter}(object, ..., scope = "sessions")

\S4method{Segment}{gaSegmentFilterList}(object, ..., scope = "sessions")

\S4method{Segment}{`NULL`}(object)

\S4method{Segment}{gaDynSegment,andExpr}(object) <- value

\S4method{Segment}{gaDynSegment,ANY}(object) <- value

\S4method{Segment}{gaSegmentId,ANY}(object) <- value

\S4method{Segment}{gaSegmentList}(object)

\S4method{Segment}{gaQuery}(object)

\S4method{Segment}{gaQuery,ANY}(object) <- value

\S4method{Segment}{gaUserSegment}(object)
}
\arguments{
\item{object}{An expression to coerce to a segment definition or segment ID}

\item{...}{Other expressions to combine with the first expression, if
appropriate.}

\item{scope}{The scope level to apply to the resulting segment definition.}

\item{value}{The segment definition or ID to set the segment parameter to.}
}
\description{
Get the segment.

Set the segment
}
\section{Methods (by class)}{
\itemize{
\item \code{gaSegmentId}: returns itself.

\item \code{character}: Interpret the supplied character value as a segment ID.

\item \code{numeric}: Interpret the supplied numerical value as a segment ID.

\item \code{gaDynSegment}: returns itself.

\item \code{.compoundExpr}: Create a non-sequential segment using the supplied
expressions.

\item \code{.gaSegmentFilter}: Create a dynamic segment from the supplied segment
filters.

\item \code{gaSegmentFilterList}: Create a dynamic segment using the supplied scoped lists
of segment filters.

\item \code{NULL}: returns NULL

\item \code{object = gaDynSegment,value = andExpr}: Change the definition of a dynamic segment using the
supplied expression.

\item \code{object = gaDynSegment,value = ANY}: Change the definition of a dynamic segment.

\item \code{object = gaSegmentId,value = ANY}: Change the ID of the supplied segment.

\item \code{gaSegmentList}: Returns itself

\item \code{gaQuery}: Return the definition of the segment applied to the view.

\item \code{object = gaQuery,value = ANY}: Set the segments to be used witin a query.

\item \code{gaUserSegment}: Return the segment ID of the supplied GA Management API
user segment.
}}


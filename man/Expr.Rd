% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Expr.R, R/Operand.R, R/Operator.R, R/all-generics.R
\docType{methods}
\name{Expr,.expr,ANY-method}
\alias{Expr}
\alias{Expr,.expr,ANY-method}
\alias{Expr,character,character-method}
\alias{GaExpr}
\alias{GaExpr,character,character-method}
\alias{IsRegEx}
\alias{IsRegEx,.dimOperator-method}
\alias{IsRegEx,.expr-method}
\alias{McfExpr}
\alias{McfExpr,character,character-method}
\alias{Operand}
\alias{Operand,.expr-method}
\alias{Operand,.operand-method}
\alias{Operand<-}
\alias{Operand<-,.expr-method}
\alias{Operator}
\alias{Operator,.expr-method}
\alias{Operator,.operator-method}
\alias{Operator<-}
\alias{Operator<-,.expr,ANY-method}
\alias{Operator<-,.operator,character-method}
\alias{RtExpr}
\alias{RtExpr,character,character-method}
\title{Operator.}
\usage{
\S4method{Expr}{.expr,ANY}(object)

\S4method{Expr}{character,character}(object, operator, operand,
  metricScope = "")

\S4method{GaExpr}{character,character}(object, operator, operand,
  metricScope = "")

\S4method{McfExpr}{character,character}(object, operator, operand)

\S4method{RtExpr}{character,character}(object, operator, operand)

\S4method{Operand}{.operand}(object)

\S4method{Operand}{.expr}(object)

\S4method{Operand}{.expr}(object) <- value

\S4method{Operator}{.operator}(object)

\S4method{Operator}{.operator,character}(object) <- value

\S4method{Operator}{.expr}(object)

\S4method{Operator}{.expr,ANY}(object) <- value

\S4method{IsRegEx}{.dimOperator}(object)

\S4method{IsRegEx}{.expr}(object)

Operator(object, ...)

Operator(object) <- value

Operand(object, ...)

Operand(object) <- value

IsRegEx(object)

Expr(object, operator, operand, metricScope = "")

GaExpr(object, operator, operand, metricScope = "")

McfExpr(object, operator, operand)

RtExpr(object, operator, operand)
}
\arguments{
\item{object}{The object to be coerced to a '.Operator' class or to get the
operator from.}

\item{value}{The value to set the operator to.}

\item{...}{Used by certain methods.}

\item{object}{The object for which to set the operator of.}

\item{object}{The object for which to set the operand of.}

\item{value}{The value to set the operand to.}

\item{object}{An object to set the operand of.}

\item{value}{The value to set the operand to.}

\item{object}{An object to check if whether a regular expression.}

\item{object}{A dimension or metric variable, or another object to be coerced
  to an .expr object.}
}
\value{
TRUE or FALSE
}
\description{
Get or create an operator used in an expression.

Set the operator used in an expression.

Get the operand of an expression.

Set the operand of an expression.

Checks for a regular expression.

Define a Google Analytics expression.

Create a Core Reporting API expression.

Create a Multi-Chanel Funnel Reporting API expression.

Create a Real-Time Reporting API expression.
}
\section{Methods (by class)}{
\itemize{
\item \code{object = .expr,operator = ANY}: 

\item \code{object = character,operator = character}: 

\item \code{object = character,operator = character}: 

\item \code{object = character,operator = character}: 

\item \code{object = character,operator = character}: 

\item \code{.operand}: 

\item \code{.expr}: 

\item \code{.expr}: 

\item \code{.operator}: 

\item \code{object = .operator,value = character}: 

\item \code{.expr}: 

\item \code{object = .expr,value = ANY}: 

\item \code{.dimOperator}: 

\item \code{.expr}: 
}}
\examples{
\donttest{
  myQuery <- GaQuery(view = 123456789)
  source_matches_google <- GaExpr("source", "~", "google")
  GaFilter(myQuery) <- source_matches_google
  GetGaData(myQuery)
}
\donttest{
  myQuery <- McfQuery(view = 123456789)
  source_matches_google <- McfExpr("mcf:source", "~", "google")
  TableFilter(myQuery) <- source_matches_google
  GetData(myQuery)
}
\donttest{
  myQuery <- RtQuery(view = 123456789)
  source_matches_google <- RtExpr("rt:source", "~", "google")
  TableFilter(myQuery) <- source_matches_google
  GetData(myQuery)
}
}

